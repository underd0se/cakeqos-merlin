#!/bin/sh
# CakeQOS-Merlin - port for Merlin firmware supported routers
# Site: https://github.com/ttgapers/cakeqos-merlin
# Thread: https://www.snbforums.com/threads/release-cakeqos-merlin.64800/
# Credits: robcore, Odkrys, ttgapers, jackiechun, maghuro, Adamm, Jack Yaz

#########################################################
##               _                                     ##
##              | |                                    ##
##    ___  __ _ | | __ ___          __ _   ___   ___   ##
##   / __|/ _` || |/ // _ \ ______ / _` | / _ \ / __|  ##
##  | (__ |(_| ||   <|  __/|______| (_| || (_) |\__ \  ##
##   \___|\__,_||_|\_\\___|        \__, | \___/ |___/  ##
##                                    | |              ##
##                                    |_|              ##
##                                                     ##
##      https://github.com/ttgapers/cakeqos-merlin     ##
##                        v1.0.7                       ##
##                                                     ##
#########################################################

# shellcheck disable=SC2086

clear
sed -n '6,21p' "$0"

readonly SCRIPT_NAME="cake-qos"
readonly SCRIPT_NAME_FANCY="CakeQOS-Merlin"
readonly SCRIPT_BRANCH="master"
readonly SCRIPT_DIR="/jffs/addons/${SCRIPT_NAME}"
readonly SCRIPT_CFG="${SCRIPT_DIR}/${SCRIPT_NAME}.cfg"
readonly SCRIPT_REMOTEDIR="https://raw.githubusercontent.com/underd0se/cakeqos-merlin/${SCRIPT_BRANCH}"

readonly CRIT="\\e[41m"
readonly ERR="\\e[31m"
readonly WARN="\\e[33m"
readonly PASS="\\e[32m"

[ -z "$(nvram get odmpid)" ] && RMODEL=$(nvram get productid) || RMODEL=$(nvram get odmpid) #get router model

if [ -f "$SCRIPT_CFG" ]; then
	. "$SCRIPT_CFG"
fi

iface="$(nvram get wan0_ifname)"

Print_Output(){
	if [ "$1" = "true" ]; then
		logger -t "$SCRIPT_NAME_FANCY" "$2"
		printf "\\e[1m$3%s: $2\\e[0m\\n" "$SCRIPT_NAME_FANCY"
	else
		printf "\\e[1m$3%s: $2\\e[0m\\n" "$SCRIPT_NAME_FANCY"
	fi
}

Filter_Version(){
	grep -m1 -oE 'v[0-9]{1,2}([.][0-9]{1,2})([.][0-9]{1,2})'
}

Validate_Bandwidth(){
	grep -qE "^[0-9]{1,3}(\.[0-9]+)?$"
}

Write_Config(){
	{
		printf '%s\n' "##############################################"
		printf '%s\n' "## Generated By Cake - Do Not Manually Edit ##"
		printf '%-43s %s\n' "## $(date +"%b %d %T")" "##"
		printf '%s\n\n' "##############################################"
		printf '%s\n' "## Installer ##"
		printf '%s="%s"\n' "dlspeed" "$dlspeed"
		printf '%s="%s"\n' "upspeed" "$upspeed"
		printf '%s="%s"\n' "queueprio" "$queueprio"
		printf '%s="%s"\n' "optionsdl" "$optionsdl"
		printf '%s="%s"\n' "optionsup" "$optionsup"
		printf '\n%s\n' "##############################################"
	} > "$SCRIPT_CFG"
}

Display_Line(){
	printf '\n#########################################################\n\n'
}

Cake_CheckStatus(){
	STATUS_UPLOAD=$(tc qdisc | grep -E "^qdisc cake .* dev ${iface} root")
	STATUS_DOWNLOAD=$(tc qdisc | grep -E "^qdisc cake .* dev ifb9${iface} root")
	if [ -n "$STATUS_UPLOAD" ] && [ -n "$STATUS_DOWNLOAD" ]; then
		return 0
	else
		return 1
	fi
}

Cake_CheckUpdates(){
	VERSION_REMOTE_MANIFEST=$(/usr/sbin/curl -fsL --retry 3 --connect-timeout 3 "${SCRIPT_REMOTEDIR}/versions.txt")
	if [ -n "$VERSION_REMOTE_MANIFEST" ]; then
		VERSION_LOCAL_CAKE=$(opkg list_installed | grep "^sched-cake-oot - " | awk -F " - " '{print $2}' | cut -d- -f-4)
		VERSION_LOCAL_TC=$(opkg list_installed | grep "^tc-adv - " | awk -F " - " '{print $2}')
		VERSION_REMOTE_CAKE=$(echo "$VERSION_REMOTE_MANIFEST" | awk -F "|" '{print $1}')
		VERSION_REMOTE_TC=$(echo "$VERSION_REMOTE_MANIFEST" | awk -F "|" '{print $2}')
		MD5_LOCAL_SCRIPT="$(md5sum "$0" | awk '{print $1}')"
		MD5_REMOTE_SCRIPT="$(/usr/sbin/curl -fsL --retry 3 ${SCRIPT_REMOTEDIR}/${SCRIPT_NAME}.sh | md5sum | awk '{print $1}')"
		if [ "$VERSION_LOCAL_CAKE" != "$VERSION_REMOTE_CAKE" ] || [ ! -f "/opt/lib/modules/sch_cake.ko" ] || [ "$VERSION_LOCAL_TC" != "$VERSION_REMOTE_TC" ] || [ ! -f "/opt/sbin/tc" ] || [ "$MD5_LOCAL_SCRIPT" != "$MD5_REMOTE_SCRIPT" ]; then
			return 0
		else
			return 1
		fi
	else
		return 1
	fi
}

Download_File() {
	if [ "$(curl -fsL --retry 3 --connect-timeout 3 "${SCRIPT_REMOTEDIR}/${1}" | md5sum | awk '{print $1}')" != "$(md5sum "$2" 2>/dev/null | awk '{print $1}')" ]; then
		if curl -fsL --retry 3 --connect-timeout 3 "${SCRIPT_REMOTEDIR}/${1}" -o "$2"; then
			Print_Output "false" "Updated $(echo "$1" | awk -F / '{print $NF}')" "$PASS"
		else
			Print_Output "false" "Updating $(echo "$1" | awk -F / '{print $NF}') Failed)" "$ERR"
			return 1
		fi
	else
		return 1
	fi
}

Cake_Bin_Download(){
	VERSION_REMOTE_MANIFEST=$(/usr/sbin/curl -fsL --retry 3 --connect-timeout 3 "${SCRIPT_REMOTEDIR}/versions.txt")
	if [ -n "$VERSION_REMOTE_MANIFEST" ]; then
		VERSION_LOCAL_CAKE=$(opkg list_installed | grep "^sched-cake-oot - " | awk -F " - " '{print $2}' | cut -d- -f-4)
		VERSION_REMOTE_CAKE=$(echo "$VERSION_REMOTE_MANIFEST" | awk -F "|" '{print $1}')
		VERSION_LOCAL_TC=$(opkg list_installed | grep "^tc-adv - " | awk -F " - " '{print $2}')
		VERSION_REMOTE_TC=$(echo "$VERSION_REMOTE_MANIFEST" | awk -F "|" '{print $2}')
		if [ "$VERSION_LOCAL_CAKE" != "$VERSION_REMOTE_CAKE" ] || [ ! -f "/opt/lib/modules/sch_cake.ko" ]|| [ "$VERSION_LOCAL_TC" != "$VERSION_REMOTE_TC" ] || [ ! -f "/opt/sbin/tc" ]; then
			case "$RMODEL" in
				RT-AC86U|GT-AC2900)
					FILE1_TYPE="ac"
					FILE_ARCH="aarch64-3.10"
				;;
				RT-AX88U)
					FILE1_TYPE="ax"
					FILE_ARCH="aarch64-3.10"
				;;
				RT-AX56U|RT-AX58U|RT-AX3000)
					FILE1_TYPE="ax32"
					FILE_ARCH="armv7-2.6"
				;;
				RT-AX86U)
					FILE1_TYPE="ax86"
					FILE_ARCH="aarch64-3.10"
				;;
			esac
			opkg update
			if [ "$VERSION_LOCAL_CAKE" != "$VERSION_REMOTE_CAKE" ] || [ ! -f "/opt/lib/modules/sch_cake.ko" ]; then
				FILE1="sched-cake-oot_${VERSION_REMOTE_CAKE}-${FILE1_TYPE}_${FILE_ARCH}.ipk"
				FILE1_OUT="sched-cake-oot.ipk"
				if Download_File "${FILE1}" "/opt/tmp/${FILE1_OUT}"; then
					opkg --autoremove remove sched-cake-oot
					/opt/bin/opkg install "/opt/tmp/${FILE1_OUT}"
					rm -rf "/opt/tmp/${FILE1_OUT}"
				fi
			fi
			if [ "$VERSION_LOCAL_TC" != "$VERSION_REMOTE_TC" ] || [ ! -f "/opt/sbin/tc" ]; then
				FILE2="tc-adv_${VERSION_REMOTE_TC}_${FILE_ARCH}.ipk"
				FILE2_OUT="tc-adv.ipk"
				if Download_File "${FILE2}" "/opt/tmp/${FILE2_OUT}"; then
					opkg --autoremove remove tc-adv
					/opt/bin/opkg install "/opt/tmp/${FILE2_OUT}"
					rm -rf "/opt/tmp/${FILE2_OUT}"
				fi
			fi
		else
			Print_Output "false" "Your cake binaries are up-to-date." "$PASS"
		fi
	else
		Print_Output "false" "Unable to download manifest" "$ERR"
	fi
}

Cake_Start(){
	if [ -z "$dlspeed" ]; then
		Print_Output "true" "Download Speed value missing - Please configure this to proceed" "$WARN"
		exit 1
	elif [ -z "$upspeed" ]; then
		Print_Output "true" "Upload Speed value missing - Please configure this to proceed" "$WARN"
		exit 1
	elif [ -z "$queueprio" ]; then
		Print_Output "true" "Queue Priority value missing - Please configure this to proceed" "$WARN"
		exit 1
	fi

	entwaretimer="0"
	while [ ! -f "/opt/bin/sh" ] && [ "$entwaretimer" -lt "10" ]; do
		entwaretimer="$((entwaretimer + 1))"
		Print_Output "true" "Entware isn't ready, waiting 10 sec - Attempt #$entwaretimer" "$WARN"
		sleep 10
	done
	if [ "$entwaretimer" -ge "100" ]; then
		Print_Output "true" "Entware didn't start in 100 seconds, please check!" "$CRIT"
		exit 1
	fi

	if [ "$(nvram get jffs2_scripts)" != "1" ]; then
		nvram set jffs2_scripts=1
		nvram commit
		Print_Output "true" "Custom JFFS scripts enabled - Please manually reboot to apply changes" "$CRIT"
	fi

	# Add to nat-start
	if [ ! -f "/jffs/scripts/nat-start" ]; then
		echo "#!/bin/sh" > /jffs/scripts/nat-start
		echo >> /jffs/scripts/nat-start
	elif [ -f "/jffs/scripts/nat-start" ] && ! head -1 /jffs/scripts/nat-start | grep -qE "^#!/bin/sh"; then
		sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/nat-start
	fi
	if ! grep -qF "${SCRIPT_DIR}/${SCRIPT_NAME} start & # $SCRIPT_NAME_FANCY" /jffs/scripts/nat-start; then
		sed -i '\~# CakeQOS-Merlin~d' /jffs/scripts/nat-start
		echo "${SCRIPT_DIR}/${SCRIPT_NAME} start & # $SCRIPT_NAME_FANCY" >> /jffs/scripts/nat-start
		chmod 0755 /jffs/scripts/nat-start
	fi

	# Add to services-stop
	if [ ! -f "/jffs/scripts/services-stop" ]; then
		echo "#!/bin/sh" > /jffs/scripts/services-stop
		echo >> /jffs/scripts/services-stop
	elif [ -f "/jffs/scripts/services-stop" ] && ! head -1 /jffs/scripts/services-stop | grep -qE "^#!/bin/sh"; then
		sed -i '1s~^~#!/bin/sh\n~' /jffs/scripts/services-stop
	fi
	if ! grep -qF "# CakeQOS-Merlin" /jffs/scripts/services-stop; then
		echo "${SCRIPT_DIR}/${SCRIPT_NAME} stop"' # '"$SCRIPT_NAME_FANCY" >> /jffs/scripts/services-stop
		chmod 0755 /jffs/scripts/services-stop
	fi

	if [ ! -f "/opt/lib/modules/sch_cake.ko" ] || [ ! -f "/opt/sbin/tc" ]; then
		Print_Output "true" "Cake binaries missing - Exiting" "$CRIT"
		exit 1
	fi

	if [ "$(nvram get qos_enable)" = "1" ]; then
		nvram set qos_enable="0"
		nvram commit
		service "restart_qos;restart_firewall" >/dev/null 2>&1
		Print_Output "true" "Disabling Asus QoS" "$WARN"
	fi

	if [ ! -L "/opt/bin/${SCRIPT_NAME}" ] || [ "$(readlink /opt/bin/${SCRIPT_NAME})" != "${SCRIPT_DIR}/${SCRIPT_NAME}" ]; then
		rm -rf /opt/bin/${SCRIPT_NAME}
		ln -s "${SCRIPT_DIR}/${SCRIPT_NAME}" "/opt/bin/${SCRIPT_NAME}"
	fi

	cru a "$SCRIPT_NAME_FANCY" "0 * * * * ${SCRIPT_DIR}/${SCRIPT_NAME} checkrun"

	Print_Output "true" "Starting - ( ${dlspeed}Mbit | ${upspeed}Mbit | $queueprio | $optionsdl | $optionsup )" "$PASS"
	if [ "$RMODEL" = "RT-AX58U" ] || [ "$RMODEL" = "RT-AX3000" ]; then
		fc config --hw-accel 0
	else
		runner disable 2>/dev/null
	fi
	fc disable 2>/dev/null
	fc flush 2>/dev/null
	nvram set runner_disable="1"
	nvram set fc_disable="1"
	nvram commit
	insmod /opt/lib/modules/sch_cake.ko 2>/dev/null
	/opt/sbin/tc qdisc replace dev ${iface} root cake bandwidth "${upspeed}Mbit" nat "$queueprio" $optionsup # options needs to be left unquoted to support multiple extra parameters
	ip link add name ifb9${iface} type ifb
	/opt/sbin/tc qdisc del dev ${iface} ingress 2>/dev/null
	/opt/sbin/tc qdisc add dev ${iface} handle ffff: ingress
	/opt/sbin/tc qdisc del dev ifb9${iface} root 2>/dev/null
	/opt/sbin/tc qdisc add dev ifb9${iface} root cake bandwidth "${dlspeed}Mbit" nat wash ingress "$queueprio" $optionsdl # options needs to be left unquoted to support multiple extra parameters
	ifconfig ifb9${iface} up
	/opt/sbin/tc filter add dev ${iface} parent ffff: protocol all prio 10 u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ifb9${iface}
}

Cake_Stop(){
	if Cake_CheckStatus; then
		Print_Output "true" "Stopping" "$PASS"
		cru d "$SCRIPT_NAME_FANCY"
		/opt/sbin/tc qdisc del dev ${iface} ingress 2>/dev/null
		/opt/sbin/tc qdisc del dev ifb9${iface} root 2>/dev/null
		/opt/sbin/tc qdisc del dev ${iface} root 2>/dev/null
		ip link del ifb9${iface}
		rmmod sch_cake 2>/dev/null
		if [ "$RMODEL" = "RT-AX58U" ] || [ "$RMODEL" = "RT-AX3000" ]; then
			fc config --hw-accel 1
		else
			runner enable
		fi
		fc enable
		nvram set runner_disable="0"
		nvram set fc_disable="0"
		nvram commit
	fi
}

Cake_Menu(){
	Display_Line
	reloadmenu="1"
	echo "Select an option"
	echo "[1]  --> Start cake"
	echo "[2]  --> Stop cake"
	echo "[3]  --> Check cake status"
	echo "[4]  --> Change cake settings"
	echo
	echo "[5]  --> Update $SCRIPT_NAME_FANCY"
	echo "[6]  --> Install $SCRIPT_NAME_FANCY"
	echo "[7]  --> Uninstall $SCRIPT_NAME_FANCY"
	echo
	echo "[e]  --> Exit"
	echo
	if [ "$1" = "check" ] && Cake_CheckUpdates; then
		Display_Line
		echo "[*] $SCRIPT_NAME_FANCY update available!"
	fi
	Display_Line
	while true; do
		echo
		printf "[1-7]: "
		read -r "menu1"
		echo
		case "$menu1" in
			1)
				option1="start"
				break
			;;
			2)
				option1="stop"
				break
			;;
			3)
				option1="status"
				while true; do
					echo "Select Status Option:"
					echo "[1]  --> Download Status"
					echo "[2]  --> Upload Status"
					echo "[3]  --> General Status"
					echo
					printf "[1-3]: "
					read -r "menu2"
					echo
					case "$menu2" in
						1)
							option2="download"
							break
						;;
						2)
							option2="upload"
							break
						;;
						3)
							option2="general"
							break
						;;
						e|exit|back|menu)
							unset "option1" "option2"
							clear
							Cake_Menu
							break
						;;
					esac
				done
				break
			;;
			4)
				option1="settings"
				while true; do
					echo "Select Setting To Modify:"
					printf '%-35s | %-40s\n' "[1]  --> Download Speed" "$(if [ -n "$dlspeed" ]; then echo "[${dlspeed} Mbit]"; else echo "[Unset]"; fi)"
					printf '%-35s | %-40s\n' "[2]  --> Upload Speed" "$(if [ -n "$upspeed" ]; then echo "[${upspeed} Mbit]"; else echo "[Unset]"; fi)"
					printf '%-35s | %-40s\n' "[3]  --> Queue Priority" "$(if [ -n "$queueprio" ]; then echo "[${queueprio}]"; else echo "[Unset]"; fi)"
					printf '%-35s | %-40s\n' "[4]  --> Extra Download Options" "$(if [ -n "$optionsdl" ]; then echo "[${optionsdl}]"; else echo "[Unset]"; fi)"
					printf '%-35s | %-40s\n' "[5]  --> Extra Upload Options" "$(if [ -n "$optionsup" ]; then echo "[${optionsup}]"; else echo "[Unset]"; fi)"
					echo
					printf '%-35s\n' "[e]  --> Exit"
					echo
					printf "[1-5]: "
					read -r "menu2"
					echo
					case "$menu2" in
						1)
							option2="dlspeed"
							echo "Please enter your download speed:"
							echo
							printf "[Mbit]: "
							read -r "option3"
							echo
							if ! echo "$option3" | Validate_Bandwidth; then
								echo "${option3} is not a valid number!"
								unset "option2" "option3"
								echo
								continue
							fi
							break
						;;
						2)
							option2="upspeed"
							echo "Please enter your upload speed:"
							echo
							printf "[Mbit]: "
							read -r "option3"
							echo
							if ! echo "$option3" | Validate_Bandwidth; then
								echo "${option3} is not a valid number!"
								unset "option2" "option3"
								echo
								continue
							fi
							break
						;;
						3)
							option2="queueprio"
							while true; do
								echo "Select Queue Priority Type:"
								echo "[1]  --> besteffort (default)"
								echo "[2]  --> diffserv3"
								echo "[3]  --> diffserv4"
								echo "[4]  --> diffserv8"
								echo
								printf "[1-4]: "
								read -r "menu3"
								echo
								case "$menu3" in
									1|"")
										option3="besteffort"
										break
									;;
									2)
										option3="diffserv3"
										break
									;;
									3)
										option3="diffserv4"
										break
									;;
									4)
										option3="diffserv8"
										break
									;;
									e|exit|back|menu)
										unset "option1" "option2"
										clear
										Cake_Menu
										break
									;;
									*)
										echo "$menu3 Isn't An Option!"
										echo
									;;
								esac
							done
							break
						;;
						4)
							option2="optionsdl"
							echo "Please enter your extra download options:"
							printf "[Options]: "
							read -r "option3"
							echo
							break
						;;
						5)
							option2="optionsup"
							echo "Please enter your extra upload options:"
							printf "[Options]: "
							read -r "option3"
							echo
							break
						;;
						e|exit|back|menu)
							unset "option1" "option2" "option3"
							clear
							Cake_Menu
							break
						;;
					esac
				done
				break
			;;
			5)
				option1="update"
				break
			;;
			6)
				option1="install"
				break
			;;
			7)
				option1="uninstall"
				break
			;;
			e)
				echo "Exiting!"
				echo
				exit 0
			;;
			*)
				echo "$menu1 Isn't An Option!"
				echo
			;;
		esac
	done
}

if [ -z "$1" ]; then
	Cake_Menu "check"
fi

if [ -n "$option1" ]; then
	set "$option1" "$option2" "$option3"
	echo "[$] $0 $*" | tr -s " "
fi

Display_Line

case $1 in
	start)
		Cake_Stop
		Cake_Start
	;;
	stop)
		Cake_Stop
		if tty >/dev/null 2>&1; then
			sed -i '\~# CakeQOS-Merlin~d' /jffs/scripts/nat-start /jffs/scripts/services-stop 2>/dev/null
		fi
	;;
	status)
		if Cake_CheckStatus; then
			case "$2" in
				download)
					tc -s qdisc show dev ifb9${iface}
				;;
				upload)
					tc -s qdisc show dev ${iface}
				;;
				general)
					Print_Output "false" "> Download Status:" "$PASS"
					echo "$STATUS_DOWNLOAD"
					echo
					Print_Output "false" "> Upload Status:" "$PASS"
					echo "$STATUS_UPLOAD"
				;;
				*)
					echo "Command Not Recognized, Please Try Again"
					echo; exit 2
				;;
			esac
		else
			Print_Output "false" "Not running..." "$WARN"
		fi
	;;
	settings)
		case "$2" in
			dlspeed)
				if ! echo "$3" | Validate_Bandwidth; then echo "${3} is not a valid number!"; echo; exit 2; fi
				dlspeed="${3}"
			;;
			upspeed)
				if ! echo "$3" | Validate_Bandwidth; then echo "${3} is not a valid number!"; echo; exit 2; fi
				upspeed="${3}"
			;;
			queueprio)
				case "$3" in
					besteffort)
						queueprio="besteffort"
					;;
					diffserv3)
						queueprio="diffserv3"
					;;
					diffserv4)
						queueprio="diffserv4"
					;;
					diffserv8)
						queueprio="diffserv8"
					;;
					*)
						echo "Command Not Recognized, Please Try Again"
						echo; exit 2
					;;
				esac
			;;
			optionsdl)
				optionsdl="$3"
			;;
			optionsup)
				optionsup="$3"
			;;
			*)
				echo "Command Not Recognized, Please Try Again"
				echo; exit 2
			;;
		esac
		Write_Config
		if Cake_CheckStatus; then
			Cake_Stop
			Cake_Start
		fi
	;;
	update)
		Cake_Bin_Download
		VERSION_LOCAL_SCRIPT="$(Filter_Version < "$0")"
		VERSION_REMOTE_SCRIPT=$(/usr/sbin/curl -fsL --retry 3 ${SCRIPT_REMOTEDIR}/${SCRIPT_NAME}.sh | Filter_Version)
		MD5_LOCAL_SCRIPT="$(md5sum "$0" | awk '{print $1}')"
		MD5_REMOTE_SCRIPT="$(/usr/sbin/curl -fsL --retry 3 ${SCRIPT_REMOTEDIR}/${SCRIPT_NAME}.sh | md5sum | awk '{print $1}')"
		if [ -n "$VERSION_REMOTE_SCRIPT" ]; then
			if [ "$MD5_LOCAL_SCRIPT" != "$MD5_REMOTE_SCRIPT" ]; then
				if [ "$VERSION_LOCAL_SCRIPT" != "$VERSION_REMOTE_SCRIPT" ]; then
					Print_Output "true" "New CakeQOS-Merlin detected ($VERSION_REMOTE_SCRIPT, currently running $VERSION_LOCAL_SCRIPT), updating..." "$WARN"
				else
					Print_Output "true" "Local and remote md5 don't match, updating..." "$WARN"
				fi
				Cake_Stop >/dev/null 2>&1
				Download_File "${SCRIPT_NAME}.sh" "$0"
				service restart_firewall
				echo; exit 1
			else
				Print_Output "false" "${SCRIPT_NAME}.sh is up-to-date." "$PASS"
			fi
		else
			Print_Output "false" "Updating ${SCRIPT_NAME}.sh Failed" "$ERR"
		fi
	;;
	install)
		if [ "$RMODEL" != "RT-AC86U" ] && [ "$RMODEL" != "GT-AC2900" ] && [ "$RMODEL" != "RT-AX88U" ] && [ "$RMODEL" != "RT-AX56U" ] && [ "$RMODEL" != "RT-AX58U" ] && [ "$RMODEL" != "RT-AX3000" ] && [ "$RMODEL" != "RT-AX86U" ]; then
			Print_Output "false" "Cake isn't yet compatible with ASUS $RMODEL, keep watching our thread!" "$CRIT"
			exit 1
		fi
		if [ "$(nvram get jffs2_scripts)" != "1" ]; then
			nvram set jffs2_scripts=1
			nvram commit
			Print_Output "true" "Custom JFFS scripts enabled - Please manually reboot to apply changes - Exiting" "$CRIT"
			exit 1
		fi
		entwaretimer="0"
		while [ ! -f "/opt/bin/sh" ] && [ "$entwaretimer" -lt "10" ]; do
			entwaretimer="$((entwaretimer + 1))"
			Print_Output "true" "Entware isn't ready, waiting 10 sec - Attempt #$entwaretimer" "$WARN"
			sleep 10
		done
		if [ "$entwaretimer" -ge "100" ]; then
			Print_Output "true" "Entware didn't start in 100 seconds, please check!" "$CRIT"
			exit 1
		fi
		Cake_Bin_Download
		Display_Line
		if [ -z "$dlspeed" ] || [ -z "$upspeed" ] || [ -z "$queueprio" ] || [ -z "$optionsdl" ] || [ -z "$optionsup" ]; then
			if [ -z "$dlspeed" ]; then
				while true; do
					echo
					echo "Please enter your download speed:"
					echo
					printf "[Mbit]: "
					read -r "dlspeed"
					echo
					if ! echo "$dlspeed" | Validate_Bandwidth; then
						echo "${dlspeed} is not a valid number!"
						continue
					fi
					break
				done

			fi
			if [ -z "$upspeed" ]; then
				while true; do
					echo
					echo "Please enter your upload speed:"
					echo
					printf "[Mbit]: "
					read -r "upspeed"
					echo
					if ! echo "$upspeed" | Validate_Bandwidth; then
						echo "${upspeed} is not a valid number!"
						continue
					fi
					break
				done
			fi
			if [ -z "$queueprio" ]; then
				while true; do
					echo
					echo "Select Queue Priority Type:"
					echo "[1]  --> besteffort (default)"
					echo "[2]  --> diffserv3"
					echo "[3]  --> diffserv4"
					echo "[4]  --> diffserv8"
					echo
					printf "[1-4]: "
					read -r "menu3"
					echo
					case "$menu3" in
						2)
							queueprio="diffserv3"
							break
						;;
						3)
							queueprio="diffserv4"
							break
						;;
						4)
							queueprio="diffserv8"
							break
						;;
						1|*)
							queueprio="besteffort"
							break
						;;
					esac
				done
			fi
			if [ -z "$optionsdl" ]; then
				echo
				echo "Please enter your extra download options:"
				printf "[Options]: "
				read -r "optionsdl"
				echo
			fi
			if [ -z "$optionsup" ]; then
				echo
				echo "Please enter your extra upload options:"
				printf "[Options]: "
				read -r "optionsup"
				echo
			fi
			Display_Line
		fi
		Write_Config
		Cake_Stop
		Cake_Start
	;;
	uninstall)
		Cake_Stop
		sed -i '\~# CakeQOS-Merlin~d' /jffs/scripts/nat-start /jffs/scripts/services-stop
		opkg --autoremove remove sched-cake-oot
		opkg --autoremove remove tc-adv
		rm -rf "/jffs/scripts/${SCRIPT_NAME}" "/opt/bin/${SCRIPT_NAME}" "${SCRIPT_DIR}"
		echo
		exit 0
	;;
	checkrun)
		if ! Cake_CheckStatus; then
			Print_Output "true" "Not running, forcing start..." "$CRIT"
			Cake_Stop
			Cake_Start
		fi
	;;
	*)
		Print_Output "false" "Usage;" "$WARN"
		printf '\n%-32s |  %-55s\n' "cake-qos start" "start $SCRIPT_NAME"
		printf '%-32s |  %-55s\n\n' "cake-qos stop" "stop $SCRIPT_NAME"
		printf '%-32s |  %-55s\n' "cake-qos status download" "check the current download status of $SCRIPT_NAME"
		printf '%-32s |  %-55s\n' "cake-qos status upload" "check the current upload status of $SCRIPT_NAME"
		printf '%-32s |  %-55s\n\n' "cake-qos status general" "check the current general status of $SCRIPT_NAME"
		printf '%-32s |  %-55s\n' "cake-qos settings dlspeed xxx" "configure download speed setting for $SCRIPT_NAME"
		printf '%-32s |  %-55s\n' "cake-qos settings upspeed xxx" "configure upload speed setting for $SCRIPT_NAME"
		printf '%-32s |  %-55s\n' "cake-qos settings queueprio xxx" "configure queue priority setting for $SCRIPT_NAME"
		printf '%-32s |  %-55s\n' "cake-qos settings optionsdl xxx" "configure download options setting for $SCRIPT_NAME"
		printf '%-32s |  %-55s\n\n' "cake-qos settings optionsup xxx" "configure upload options setting for $SCRIPT_NAME"
		printf '%-32s |  %-55s\n' "cake-qos install" "install and configure $SCRIPT_NAME"
		printf '%-32s |  %-55s\n' "cake-qos uninstall" "uninstall and remove all traces of $SCRIPT_NAME"
	;;
esac
Display_Line
if [ -n "$reloadmenu" ]; then echo; printf "[*] Press Enter To Continue..."; read -r "reloadmenu"; exec "$0"; fi
